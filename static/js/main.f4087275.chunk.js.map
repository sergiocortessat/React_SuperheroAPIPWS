{"version":3,"sources":["reportWebVitals.js","Components/SuperHeroStats.js","Components/SuperCard.js","ApiFetch.js","Components/Loading.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SuperHeroStats","data","LinearProgress","variant","value","powerstats","combat","className","durability","intelligence","power","speed","strength","SuperCard","listElements","map","item","style","width","src","image","alt","name","fullName","race","firstAppearance","publisher","URL","fetchHeroes","a","searchTerm","gender","axios","get","superheroes","sort","Math","random","strippedSuperheroes","superhero","appearance","biography","occupation","work","images","lg","searchedSuperheroes","filter","superHero","toLowerCase","startsWith","filteredSuperheroes","includes","slice","console","log","CircularUnderLoad","CircularProgress","disableShrink","App","useState","setData","setGender","setFilter","useEffect","fetchingData","length","TextField","onClick","onChange","event","target","label","FormControl","InputLabel","Select","MenuItem","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.f4087275.chunk.js","sourcesContent":["const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { LinearProgress } from '@material-ui/core';\n\nfunction SuperHeroStats({ data }) {\n  return (\n    <>\n      <p>\n        Combat\n      </p>\n      <LinearProgress variant=\"determinate\" value={data.powerstats.combat} className=\"mb-3\" />\n      <p>\n        Durability\n      </p>\n      <LinearProgress variant=\"determinate\" value={data.powerstats.durability} className=\"mb-3\" />\n      <p>\n        Intelligence\n      </p>\n      <LinearProgress variant=\"determinate\" value={data.powerstats.intelligence} className=\"mb-3\" />\n      <p>\n        Power\n      </p>\n      <LinearProgress variant=\"determinate\" value={data.powerstats.power} className=\"mb-3\" />\n      <p>\n        Speed\n      </p>\n      <LinearProgress variant=\"determinate\" value={data.powerstats.speed} className=\"mb-3\" />\n      <p>\n        Strength\n      </p>\n      <LinearProgress variant=\"determinate\" value={data.powerstats.strength} className=\"mb-3\" />\n    </>\n  );\n}\n\nSuperHeroStats.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default SuperHeroStats;\n","/* eslint-disable react/prop-types */\n/* eslint-disable react/destructuring-assignment */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport SuperHero from './SuperHeroStats';\n// import { HiOutlineMailOpen } from 's/hi';\n// import { LinearProgress } from '@material-ui/core';\n\nconst SuperCard = ({ data }) => {\n  const listElements = data.map((item) => (\n\n    <div className=\"card\" style={{ width: '18rem' }} key={item.name}>\n      <img className=\"card-img-top\" src={item.image} alt=\"Card\" />\n      <div className=\"card-body hero-name\">\n        <h5 className=\"card-title\">\n          Name:\n          {' '}\n          {item.name}\n        </h5>\n        <p className=\"card-text\">\n          Full-Name:\n          {' '}\n          {item.fullName ? item.fullName : item.name}\n        </p>\n      </div>\n      <ul className=\"list-group list-group-flush\">\n        <li className=\"list-group-item\">\n          Race:\n          {' '}\n          {item.race ? item.race : 'Unknown'}\n        </li>\n        <li className=\"list-group-item first-appearance\">\n          First Appearance:\n          {' '}\n          {(item.firstAppearance && item.firstAppearance !== '-') && item.firstAppearance}\n          {item.firstAppearance === '-' && 'Unknown'}\n        </li>\n        <li className=\"list-group-item\">\n          Publisher:\n          {' '}\n          {item.publisher}\n        </li>\n      </ul>\n      <div className=\"card-body hero-stats\">\n        <h3>Hero Stats</h3>\n        <SuperHero data={item} />\n      </div>\n    </div>\n\n  ));\n  return (\n    <>\n      { listElements }\n    </>\n  );\n};\nSuperCard.propTypes = {\n  // data: PropTypes.shape({\n  //   // //     name: PropTypes.string.isRequired,x`x\n  //   // //     image: PropTypes.shape({\n  //   // //       url: PropTypes.string.isRequired,\n  //   // //     }).isRequired,\n  // }).isRequired,\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n  // data: PropTypes.arrayOf.isRequired,\n\n};\nexport default SuperCard;\n","/* eslint-disable consistent-return */\nimport axios from 'axios';\n\nconst URL = 'https://cdn.rawgit.com/akabab/superhero-api/0.2.0/api/all.json';\n\nconst fetchHeroes = async (searchTerm = '', gender = '') => {\n  try {\n    const { data } = await axios.get(URL);\n\n    const superheroes = data.sort(() => Math.random() - 0.5);\n\n    const strippedSuperheroes = superheroes.map((superhero) => {\n      const {\n        name, powerstats,\n        appearance: { gender, race },\n        biography: { fullName, firstAppearance, publisher },\n        work: { occupation }, images: { lg: image },\n      } = superhero;\n\n      const strippedSuperhero = {\n        name, powerstats, gender, race, fullName, firstAppearance, publisher, occupation, image,\n      };\n\n      return strippedSuperhero;\n    });\n\n    const searchedSuperheroes = strippedSuperheroes\n      .filter((superHero) => superHero.name.toLowerCase().startsWith(searchTerm.toLowerCase()));\n\n    const filteredSuperheroes = searchedSuperheroes\n      .filter((superHero) => superHero.gender.includes(gender));\n    if (!searchTerm) {\n      return filteredSuperheroes.slice(0, 5);\n    }\n    return filteredSuperheroes;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport default fetchHeroes;\n","import React from 'react';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nexport default function CircularUnderLoad() {\n  return <CircularProgress disableShrink />;\n}\n","/* eslint-disable max-len */\n/* eslint-disable consistent-return */\nimport { useEffect, useState } from 'react';\nimport {\n  Select, MenuItem, TextField, FormControl, InputLabel,\n} from '@material-ui/core';\nimport SuperCard from './Components/SuperCard';\nimport fetchHeroes from './ApiFetch';\nimport CircularUnderLoad from './Components/Loading';\nimport './Components/supercard.css';\nimport './searchbar.css';\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [gender, setGender] = useState('');\n  const [filter, setFilter] = useState('');\n  useEffect(() => {\n    const fetchingData = async () => {\n      setData(await fetchHeroes(filter, gender));\n    };\n\n    fetchingData();\n  }, [filter, gender]);\n\n  if (data.length === 0 && !filter) {\n    return (\n      <div>\n        <CircularUnderLoad />\n      </div>\n    );\n  }\n  return (\n    <div className=\"App\">\n\n      <div className=\"searchContainer\">\n        <TextField\n          className=\"textField\"\n          onClick={() => setFilter('')}\n          onChange={(event) => setFilter(event.target.value)}\n          variant=\"filled\"\n          value={filter}\n          label=\"Supehero Name: \"\n        />\n        <div className=\"selectContainer\">\n          <FormControl variant=\"filled\" className=\"select\">\n            <InputLabel>Gender</InputLabel>\n            <Select value={gender} onChange={(event) => setGender(event.target.value)}>\n              <MenuItem value=\"Male\">Male</MenuItem>\n              <MenuItem value=\"Female\">Female</MenuItem>\n              <MenuItem value=\"\">All</MenuItem>\n              <MenuItem value=\"-\">Genderless</MenuItem>\n            </Select>\n          </FormControl>\n        </div>\n      </div>\n\n      <div className=\"supercard\">\n        {data && <SuperCard data={data} />}\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}